{"ast":null,"code":"var _jsxFileName = \"F:\\\\flybuy-customer\\\\src\\\\components\\\\pages\\\\Chat\\\\Chatbot\\\\index.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport axios from '../../../../axios';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { saveMessage } from '../../../../_actions/message_actions';\nimport Message from './Sections/Message';\nimport { List, Avatar } from 'antd';\nimport Card from './Sections/Card';\nimport { useParams } from 'react-router-dom';\nimport { CommentOutlined, RobotOutlined } from '@ant-design/icons';\n\nfunction Chatbot() {\n  const {\n    userId\n  } = useParams();\n  const dispatch = useDispatch();\n  const [messagesFromRedux, setMessagesFromRedux] = useState([]);\n  const messagesFromReduxStore = useSelector(state => state.message.messages);\n  useEffect(() => {\n    setMessagesFromRedux([]);\n    eventQuery('flybuy-chat-bot');\n  }, [userId]);\n  useEffect(() => {\n    if (messagesFromReduxStore) setMessagesFromRedux(messagesFromReduxStore);\n  }, [messagesFromReduxStore]);\n\n  const textQuery = async text => {\n    //  First  Need to  take care of the message I sent\n    let conversation = {\n      who: 'user',\n      content: {\n        text: {\n          text: text\n        }\n      }\n    };\n    dispatch(saveMessage(conversation)); // console.log('text I sent', conversation)\n    // We need to take care of the message Chatbot sent\n\n    const textQueryVariables = {\n      text\n    };\n\n    try {\n      //I will send request to the textQuery ROUTE\n      const response = await axios.post(`/api/dialogflow/textQuery/${userId}`, textQueryVariables);\n\n      for (let content of response.data.fulfillmentMessages) {\n        conversation = {\n          who: 'bot',\n          content: content\n        };\n        var msg = new SpeechSynthesisUtterance(content.text.text);\n        window.speechSynthesis.speak(msg);\n        dispatch(saveMessage(conversation));\n      }\n    } catch (error) {\n      conversation = {\n        who: 'bot',\n        content: {\n          text: {\n            text: ' Error just occured, please check the problem'\n          }\n        }\n      };\n      dispatch(saveMessage(conversation));\n    }\n  };\n\n  const eventQuery = async event => {\n    // We need to take care of the message Chatbot sent\n    const eventQueryVariables = {\n      event\n    };\n\n    try {\n      //I will send request to the textQuery ROUTE\n      const response = await axios.post(`/api/dialogflow/eventQuery/${userId}`, eventQueryVariables);\n\n      if (response) {\n        var msg = new SpeechSynthesisUtterance('hello, how can i help');\n        window.speechSynthesis.speak(msg);\n      }\n\n      for (let content of response.data.fulfillmentMessages) {\n        let conversation = {\n          who: 'bot',\n          content: content\n        };\n        dispatch(saveMessage(conversation));\n      }\n    } catch (error) {\n      let conversation = {\n        who: 'bot',\n        content: {\n          text: {\n            text: ' Error just occured, please check the problem'\n          }\n        }\n      };\n      dispatch(saveMessage(conversation));\n    }\n  };\n\n  const keyPressHanlder = e => {\n    if (e.key === 'Enter') {\n      if (!e.target.value) {\n        return alert('you need to type somthing first');\n      } //we will send request to text query route\n\n\n      textQuery(e.target.value);\n      e.target.value = '';\n    }\n  };\n\n  const renderCards = cards => {\n    return cards.map((card, i) => /*#__PURE__*/React.createElement(Card, {\n      key: i,\n      cardInfo: card.structValue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 33\n      }\n    }));\n  };\n\n  const renderOneMessage = (message, i) => {\n    console.log('message', message); // we need to give some condition here to separate message kinds\n    // template for normal text\n\n    if (message && message.content && message.content.text && message.content.text.text) {\n      return /*#__PURE__*/React.createElement(Message, {\n        key: i,\n        who: message.who,\n        text: message.content.text.text,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }\n      });\n    } else if (message && message.content && message.content.payload.fields.card) {\n      const AvatarSrc = message.who === 'bot' ? /*#__PURE__*/React.createElement(RobotOutlined, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 46\n        }\n      }) : /*#__PURE__*/React.createElement(CommentOutlined, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 66\n        }\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(List.Item, {\n        style: {\n          padding: '1rem'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 6\n        }\n      }, /*#__PURE__*/React.createElement(List.Item.Meta, {\n        avatar: /*#__PURE__*/React.createElement(Avatar, {\n          icon: AvatarSrc,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 16\n          }\n        }),\n        title: message.who,\n        description: renderCards(message.content.payload.fields.card.listValue.values),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 7\n        }\n      })));\n    } // template for card message\n\n  };\n\n  const renderMessage = returnedMessages => {\n    if (returnedMessages) {\n      return returnedMessages.map((message, i) => {\n        return renderOneMessage(message, i);\n      });\n    } else {\n      return null;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: 400,\n      width: 700,\n      border: '3px solid black',\n      borderRadius: '7px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: 340,\n      width: '100%',\n      overflow: 'auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 4\n    }\n  }, renderMessage(messagesFromRedux)), /*#__PURE__*/React.createElement(\"input\", {\n    style: {\n      margin: 0,\n      width: '100%',\n      height: 50,\n      borderRadius: '4px',\n      padding: '5px',\n      fontSize: '1rem'\n    },\n    placeholder: \"Send a message...\",\n    onKeyPress: keyPressHanlder,\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 4\n    }\n  }));\n}\n\nexport default Chatbot;","map":{"version":3,"sources":["F:/flybuy-customer/src/components/pages/Chat/Chatbot/index.jsx"],"names":["React","useEffect","useState","axios","useDispatch","useSelector","saveMessage","Message","List","Avatar","Card","useParams","CommentOutlined","RobotOutlined","Chatbot","userId","dispatch","messagesFromRedux","setMessagesFromRedux","messagesFromReduxStore","state","message","messages","eventQuery","textQuery","text","conversation","who","content","textQueryVariables","response","post","data","fulfillmentMessages","msg","SpeechSynthesisUtterance","window","speechSynthesis","speak","error","event","eventQueryVariables","keyPressHanlder","e","key","target","value","alert","renderCards","cards","map","card","i","structValue","renderOneMessage","console","log","payload","fields","AvatarSrc","padding","listValue","values","renderMessage","returnedMessages","height","width","border","borderRadius","overflow","margin","fontSize"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from '../../../../axios';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { saveMessage } from '../../../../_actions/message_actions';\nimport Message from './Sections/Message';\nimport { List, Avatar } from 'antd';\nimport Card from './Sections/Card';\nimport { useParams } from 'react-router-dom';\nimport { CommentOutlined, RobotOutlined } from '@ant-design/icons';\nfunction Chatbot() {\n\tconst { userId } = useParams();\n\tconst dispatch = useDispatch();\n\tconst [messagesFromRedux, setMessagesFromRedux] = useState([]);\n\tconst messagesFromReduxStore = useSelector((state) => state.message.messages);\n\n\tuseEffect(() => {\n\t\tsetMessagesFromRedux([]);\n\t\teventQuery('flybuy-chat-bot');\n\t}, [userId]);\n\tuseEffect(() => {\n\t\tif (messagesFromReduxStore) setMessagesFromRedux(messagesFromReduxStore);\n\t}, [messagesFromReduxStore]);\n\tconst textQuery = async (text) => {\n\t\t//  First  Need to  take care of the message I sent\n\t\tlet conversation = {\n\t\t\twho: 'user',\n\t\t\tcontent: {\n\t\t\t\ttext: {\n\t\t\t\t\ttext: text,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\tdispatch(saveMessage(conversation));\n\t\t// console.log('text I sent', conversation)\n\n\t\t// We need to take care of the message Chatbot sent\n\t\tconst textQueryVariables = {\n\t\t\ttext,\n\t\t};\n\t\ttry {\n\t\t\t//I will send request to the textQuery ROUTE\n\t\t\tconst response = await axios.post(`/api/dialogflow/textQuery/${userId}`, textQueryVariables);\n\n\t\t\tfor (let content of response.data.fulfillmentMessages) {\n\t\t\t\tconversation = {\n\t\t\t\t\twho: 'bot',\n\t\t\t\t\tcontent: content,\n\t\t\t\t};\n\n\t\t\t\tvar msg = new SpeechSynthesisUtterance(content.text.text);\n\t\t\t\twindow.speechSynthesis.speak(msg);\n\n\t\t\t\tdispatch(saveMessage(conversation));\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconversation = {\n\t\t\t\twho: 'bot',\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: {\n\t\t\t\t\t\ttext: ' Error just occured, please check the problem',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tdispatch(saveMessage(conversation));\n\t\t}\n\t};\n\n\tconst eventQuery = async (event) => {\n\t\t// We need to take care of the message Chatbot sent\n\t\tconst eventQueryVariables = {\n\t\t\tevent,\n\t\t};\n\t\ttry {\n\t\t\t//I will send request to the textQuery ROUTE\n\n\t\t\tconst response = await axios.post(`/api/dialogflow/eventQuery/${userId}`, eventQueryVariables);\n\t\t\tif (response) {\n\t\t\t\tvar msg = new SpeechSynthesisUtterance('hello, how can i help');\n\t\t\t\twindow.speechSynthesis.speak(msg);\n\t\t\t}\n\t\t\tfor (let content of response.data.fulfillmentMessages) {\n\t\t\t\tlet conversation = {\n\t\t\t\t\twho: 'bot',\n\t\t\t\t\tcontent: content,\n\t\t\t\t};\n\n\t\t\t\tdispatch(saveMessage(conversation));\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tlet conversation = {\n\t\t\t\twho: 'bot',\n\t\t\t\tcontent: {\n\t\t\t\t\ttext: {\n\t\t\t\t\t\ttext: ' Error just occured, please check the problem',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\t\t\tdispatch(saveMessage(conversation));\n\t\t}\n\t};\n\n\tconst keyPressHanlder = (e) => {\n\t\tif (e.key === 'Enter') {\n\t\t\tif (!e.target.value) {\n\t\t\t\treturn alert('you need to type somthing first');\n\t\t\t}\n\n\t\t\t//we will send request to text query route\n\t\t\ttextQuery(e.target.value);\n\n\t\t\te.target.value = '';\n\t\t}\n\t};\n\n\tconst renderCards = (cards) => {\n\t\treturn cards.map((card, i) => <Card key={i} cardInfo={card.structValue} />);\n\t};\n\n\tconst renderOneMessage = (message, i) => {\n\t\tconsole.log('message', message);\n\n\t\t// we need to give some condition here to separate message kinds\n\n\t\t// template for normal text\n\t\tif (message && message.content && message.content.text && message.content.text.text) {\n\t\t\treturn <Message key={i} who={message.who} text={message.content.text.text} />;\n\t\t} else if (message && message.content && message.content.payload.fields.card) {\n\t\t\tconst AvatarSrc = message.who === 'bot' ? <RobotOutlined /> : <CommentOutlined />;\n\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<List.Item style={{ padding: '1rem' }}>\n\t\t\t\t\t\t<List.Item.Meta\n\t\t\t\t\t\t\tavatar={<Avatar icon={AvatarSrc} />}\n\t\t\t\t\t\t\ttitle={message.who}\n\t\t\t\t\t\t\tdescription={renderCards(message.content.payload.fields.card.listValue.values)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</List.Item>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\t// template for card message\n\t};\n\n\tconst renderMessage = (returnedMessages) => {\n\t\tif (returnedMessages) {\n\t\t\treturn returnedMessages.map((message, i) => {\n\t\t\t\treturn renderOneMessage(message, i);\n\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t};\n\n\treturn (\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\theight: 400,\n\t\t\t\twidth: 700,\n\t\t\t\tborder: '3px solid black',\n\t\t\t\tborderRadius: '7px',\n\t\t\t}}\n\t\t>\n\t\t\t<div style={{ height: 340, width: '100%', overflow: 'auto' }}>{renderMessage(messagesFromRedux)}</div>\n\t\t\t<input\n\t\t\t\tstyle={{\n\t\t\t\t\tmargin: 0,\n\t\t\t\t\twidth: '100%',\n\t\t\t\t\theight: 50,\n\t\t\t\t\tborderRadius: '4px',\n\t\t\t\t\tpadding: '5px',\n\t\t\t\t\tfontSize: '1rem',\n\t\t\t\t}}\n\t\t\t\tplaceholder=\"Send a message...\"\n\t\t\t\tonKeyPress={keyPressHanlder}\n\t\t\t\ttype=\"text\"\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default Chatbot;\n"]},"metadata":{},"sourceType":"module"}